import os
from flask_cors import CORS
import json
from flask import Flask, render_template, request, Response, jsonify, abort
from flask_sqlalchemy import SQLAlchemy
from flask_migrate import Migrate
from sqlalchemy.orm import backref
from models import setup_db, db, Movie, Director
from auth.auth import AuthError, requires_auth
from sqlalchemy.exc import SQLAlchemyError


def create_app(test_config=None):
    ENV = 'prod'
    app = Flask(__name__)
    setup_db(app)
    cors = CORS(app)
    migrate = Migrate(app, db)

    @app.after_request
    def after_request(response):
        response.headers.add
        ('Access-Control-Allow-Headers', 'Content-Type,Authorization,true')
        response.headers.add
        ('Access-Control-Allow-Methods', 'GET,PATCH,POST,DELETE')
        return response

    @app.route('/')
    def index():
        return render_template('index.html')


    @app.route('/movies', methods=['GET'])
    @requires_auth('get:movies')
    def get_movies(token):

        movies = Movie.query.all()
        if len(movies) == 0:
            Movies_list = {}
        else:
            Movies_list = []
            for movie in movies:
                Movies_list.append({
                    "id": movie.id,
                    "title": movie.title,
                    "rate": movie.rate,
                })
       
        directores = Director.query.all()
        if len(directores) == 0:
            directores_list = {}
        else:
            directores_list = []
            for director in directores:
                directores_list.append({
                        "id": director.id,
                        "name": director.name,
                    })
       

        return jsonify({
            'Movies_list': Movies_list,
            'directores_list': directores_list,
            'status': 200,
            'success': True,
        })

   
    @app.route('/movie', methods=['POST'])
    @requires_auth('post:movie')
    def add_movie(token):
        body = request.get_json()
        movie_title = body.get('movie_title', None)
        movie_rate = body.get('movie_rate', None)
        if movie_title is None:
            abort(422)
        try:
            movie = Movie(title=movie_title,rate=movie_rate)
            movie.insert()
            return jsonify({
                'status': 200,
                'success': True,
            })
        except:
            abort(422)
    
    @app.route('/director', methods=['POST'])
    @requires_auth('post:director')
    def add_director(token):
        body = request.get_json()
        director_name = body.get('director_name', None)
        movie_id=body.get('movie_id', None)
        if director_name or movie_id is None:
            abort(422)
        try:
            director = Director(name=director_name,movie_id=movie_id)

            director.insert()
            return jsonify({
                'status': 200,
                'success': True,
            })
        except:
            abort(422)
    


    @app.route('/Movie/<int:movie_id>', methods=['PATCH'])
    @requires_auth('patch:movie')
    def update_movie(token, movie_id):
        movie = Movie.query.filter(Movie.id == movie_id).one_or_none()
        
        if movie is None:
            abort(422)
       
        body = request.get_json()

        try:
            if 'movie_title' in body:
                movie.title = body.get('movie_title')
            if 'movie_rate' in body:
                movie.rate = body.get('movie_rate')
            movie.update()
            return jsonify({
                'status': 200,
                'success': True
            })
        except:
            abort(422)

    @app.route('/movie/<int:movie_id>', methods=['DELETE'])
    @requires_auth('delete:movie')
    def delete_movie(token, movie_id):
        movie = Movie.query.filter(
            Movie.id == movie_id).one_or_none()
        if movie is None:
            abort(404)

        try:
            movie.delete()
            return jsonify({
                'status': 200,
                'success': True,
            })
        except:
            abort(422)

    '''
    Error Handling
    '''

    @app.errorhandler(400)
    def bad_request(error):
        return jsonify({
            "success": False,
            "error": 400,
            "message": "Bad Request"
        }), 400

    @app.errorhandler(404)
    def not_found(error):
        return jsonify({
            "success": False,
            "error": 404,
            "message": "Not Found"
        }), 404

    @app.errorhandler(422)
    def unprocessable_entity(error):
        return jsonify({
            "success": False,
            "error": 422,
            "message": "Unprocessable Entity"
        }), 422

    @app.errorhandler(500)
    def internal_server_error(error):
        return jsonify({
            "success": False,
            "error": 500,
            "message": "Internal Server Error"
        }), 500

    @app.errorhandler(AuthError)
    def handle_auth_error(exciption):
        response = jsonify(exciption.error)
        response.status_code = exciption.status_code
        return response
    print(__name__, flush=True)
    if __name__ == '__main__':
        if ENV == 'dev':
            app.run(host='127.0.0.1', port=5000, debug=True)
        else:
            app.run(debug=False)

    return app